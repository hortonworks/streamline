#!/bin/bash
#
# Copyright 2017 Hortonworks.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Home Dir
base_dir=$(dirname $0)/..

#if HDP_DIR is not set its a dev env.
if [ "x$HDP_DIR" = "x" ]; then
    STREAMLINE_HOME=$base_dir
    PID_DIR=$base_dir/logs
    LOG_DIR=$base_dir/logs
    mkdir -p $LOG_DIR
else
    STREAMLINE_HOME=$HDP_DIR/streamline
fi


[ -z $MAX_WAIT_TIME ] && MAX_WAIT_TIME=120

# Streamline env script
. $STREAMLINE_HOME/conf/streamline-env.sh

#Streamline PID
PID=0

# Start, stop, status
STREAMLINE_LAUNCH_COMMAND=$1

# User Name for setup parameter
[ -z $STREAMLINE_USER ] && STREAMLINE_USER=streamline


#App name
APP_NAME=streamline

STREAMLINE_START_CMD="$STREAMLINE_HOME/bin/streamline-server-start.sh $STREAMLINE_HOME/conf/streamline.yaml"
STREAMLINE_SETUP_CMD="$STREAMLINE_HOME/bootstrap/bootstrap-storage.sh"
STREAMLINE_BOOTSTRAP_CMD="$STREAMLINE_HOME/bootstrap/bootstrap.sh"

#Name of PID file
[ -z $PID_DIR ] && PID_DIR="/var/run/$APP_NAME"
[ -z $LOG_DIR ] && LOG_DIR="/var/log/$APP_NAME"

#Name of PID file
PID_FILE="$PID_DIR/$APP_NAME.pid"
#Name of ERR file
ERR_FILE="$LOG_DIR/$APP_NAME.err"


function main {
   case "$1" in
      start)
         streamlineStart
         ;;
      stop)
         streamlineStop
         ;;
      status)
         streamlineStatus
         ;;
      clean)
         streamlineClean
         ;;
      setup)
          streamlineSetup
          ;;
      bootstrap)
          streamlineBootstrap
          ;;

      *)
         printf "Usage: $0 {start|stop|status|clean|setup|bootstrap}\n"
         ;;
   esac
}

function streamlineStart {

   getPID
   if [ $? -eq 0 ]; then
     printf "Streamline is already running with PID=$PID.\n"
     exit 0
   fi

   printf "Starting Streamline "

   rm -f $PID_FILE
   su $STREAMLINE_USER -c "nohup $STREAMLINE_START_CMD >>/dev/null 2>>$ERR_FILE & echo \$! > $PID_FILE"

   getPID
   streamlineIsRunning $PID
   if [ $? -ne 1 ]; then
      printf "failed.\n"
      exit 1
   fi

   printf "succeeded with PID=$PID.\n"
   return 0
}

function streamlineStop {
   getPID
   streamlineIsRunning $PID
   if [ $? -eq 0 ]; then
     printf "Streamline is not running.\n"
     rm -f $PID_FILE
     return 0
   fi

   printf "Stopping Streamline [$PID] "
   streamlineKill $PID >>/dev/null 2>>$ERR_FILE

   if [ $? -ne 0 ]; then
     printf "failed. \n"
     exit 1
   else
     rm -f $PID_FILE
     printf "succeeded.\n"
     return 0
   fi
}

function streamlineStatus {
   printf "Streamline "
   getPID
   if [ $? -eq 1 ]; then
     printf "is not running. No pid file found.\n"
     return 0
   fi

   streamlineIsRunning $PID
   if [ $? -eq 1 ]; then
     printf "is running with PID=$PID.\n"
     exit 1
   else
     printf "is not running.\n"
     return 0
   fi
}

# Removed the Streamline PID file if Streamline is not running
function streamlineClean {
   getPID
   streamlineIsRunning $PID
   if [ $? -eq 0 ]; then
     deleteLogFiles
     return 0
   else
     printf "Can't clean files.  Streamline is running with PID=$PID.\n"
     exit 1
   fi
}

function streamlineSetup {
    printf "Running Streamline Setup.\n"
    su $STREAMLINE_USER -c "$STREAMLINE_SETUP_CMD"
}

function streamlineBootstrap {
    printf "Streamline "
    getPID
    if [ $? -eq 1 ]; then
        printf "is not running. No pid file found.\n"
        printf "Please start streamline server before running bootstrap.\n"
        return 0
    fi
    su $STREAMLINE_USER -c "$STREAMLINE_BOOTSTRAP_CMD"
}

# Returns 0 if the Knox is running and sets the $PID variable.
function getPID {
   if [ ! -d $PID_DIR ]; then
      printf "Can't find pid dir.\n"
      exit 1
   fi
   if [ ! -f $PID_FILE ]; then
     PID=0
     return 1
   fi

   PID="$(<$PID_FILE)"
   return 0
}

function streamlineIsRunning {
   if [ $1 -eq 0 ]; then return 0; fi

   ps -p $1 > /dev/null

   if [ $? -eq 1 ]; then
     return 0
   else
     return 1
   fi
}

function streamlineKill {
   local localPID=$1
   kill $localPID || return 1
   for ((i=0; i<MAX_WAIT_TIME; i++)); do
      streamlineIsRunning $localPID
      if [ $? -eq 0 ]; then return 0; fi
      sleep 1
   done

   kill -s KILL $localPID || return 1
   for ((i=0; i<MAX_WAIT_TIME; i++)); do
      streamlineIsRunning $localPID
      if [ $? -eq 0 ]; then return 0; fi
      sleep 1
   done

   return 1
}

function createLogFiles {
   if [ ! -d "$LOG_DIR" ]; then
      printf "Can't find log dir.  Run sudo $0 setup.\n"
      exit 1
   fi
   if [ ! -f "$OUT_FILE" ]; then su $STREAMLINE_USER -c "touch $OUT_FILE"; fi
   if [ ! -f "$ERR_FILE" ]; then su $STREAMLINE_USER -c "touch $ERR_FILE"; fi
}

function deleteLogFiles {
     rm -f $PID_FILE
     printf "Removed the STREAMLINE PID file: $PID_FILE.\n"

     rm -f $OUT_FILE
     printf "Removed the STREAMLINE OUT file: $OUT_FILE.\n"

     rm -f $ERR_FILE
     printf "Removed the STREAMLINE ERR file: $ERR_FILE.\n"
}

#Starting main
main $STREAMLINE_LAUNCH_COMMAND
