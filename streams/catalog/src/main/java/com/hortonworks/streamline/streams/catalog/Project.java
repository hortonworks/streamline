package com.hortonworks.streamline.streams.catalog;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.hortonworks.registries.common.Schema;
import com.hortonworks.streamline.storage.annotation.SearchableField;
import com.hortonworks.streamline.storage.annotation.StorableEntity;
import com.hortonworks.streamline.storage.PrimaryKey;
import com.hortonworks.streamline.storage.Storable;
import com.hortonworks.streamline.storage.StorableKey;

import java.util.HashMap;
import java.util.Map;

/**
 * An Streamline project is a collection of topologies and will be persisted
 * storage layer. Generated by UI
 */
@StorableEntity
public class Project implements Storable {
    public static final String NAMESPACE = "project";
    public static final String ID = "id";
    public static final String NAME = "name";
    public static final String TIMESTAMP = "timestamp";
    public static final String DESCRIPTION = "description";

    /**
     * Unique id identifying a project. This is the composite primary key column.
     */
    private Long id;


    /**
     * Human readable project name; input from user from UI.
     */
    @SearchableField
    private String name;

    /**
     * Project description
     */
    @SearchableField
    private String description;


    /**
     * Time at which this project was created/updated.
     */
    private Long timestamp;


    public Project() {
    }


    public Project(Project other) {
        if (other != null) {
            setId(other.getId());
            setName(other.getName());
            setDescription(other.getDescription());
            setTimestamp(other.getTimestamp());
        }
    }

    @JsonIgnore
    public Schema getSchema () {
        return Schema.of(
            new Schema.Field(ID, Schema.Type.LONG),
            new Schema.Field(NAME, Schema.Type.STRING),
            new Schema.Field(DESCRIPTION, Schema.Type.STRING),
            new Schema.Field(TIMESTAMP, Schema.Type.LONG)
        );
    }

    @JsonIgnore
    public PrimaryKey getPrimaryKey () {
        Map<Schema.Field, Object> fieldToObjectMap = new HashMap<>();
        fieldToObjectMap.put(new Schema.Field(ID, Schema.Type.LONG), this.id);
        return new PrimaryKey(fieldToObjectMap);
    }



    @JsonIgnore
    public StorableKey getStorableKey () {
        return new StorableKey(getNameSpace(), getPrimaryKey());
    }

    public Map toMap () {
        Map<String, Object> map = new HashMap<>();
        map.put(ID, this.id);
        map.put(NAME, this.name);
        map.put(DESCRIPTION, this.description);
        return map;
    }

    public Project fromMap (Map<String, Object> map) {
        this.id = (Long) map.get(ID);
        this.name = (String) map.get(NAME);
        this.description = (String) map.get(DESCRIPTION);
        this.timestamp = (Long) map.get(TIMESTAMP);
        return this;
    }

    @JsonIgnore
    public String getNameSpace () {
        return NAMESPACE;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }


    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("timestamp")
    public Long getTimestamp() {
        return timestamp;
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("timestamp")
    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public String toString() {
        return "Project {" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", description ='" + description + '\'' +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Project project = (Project) o;

        return id != null ? id.equals(project.id) : project.id != null;

    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (id != null ? id.hashCode() : 0);
        return result;
    }


}
